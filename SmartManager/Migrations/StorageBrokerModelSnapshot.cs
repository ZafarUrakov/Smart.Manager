// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SmartManager.Brokers.Storages;

#nullable disable

namespace SmartManager.Migrations
{
    [DbContext(typeof(StorageBroker))]
    partial class StorageBrokerModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("SmartManager.Models.Attendances.Attendance", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTimeOffset>("Date")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsPresent")
                        .HasColumnType("tinyint(1)");

                    b.Property<Guid>("StudentId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("StudentId");

                    b.ToTable("Attendances");
                });

            modelBuilder.Entity("SmartManager.Models.Bots.Bot", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Message")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Bots");
                });

            modelBuilder.Entity("SmartManager.Models.GroupStatistics.GroupStatistic", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<int>("FemaleStudents")
                        .HasColumnType("int");

                    b.Property<Guid>("GroupId")
                        .HasColumnType("char(36)");

                    b.Property<int>("MaleStudents")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.ToTable("GroupStatistics");
                });

            modelBuilder.Entity("SmartManager.Models.Groups.Group", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("GroupName")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Groups");
                });

            modelBuilder.Entity("SmartManager.Models.PaymentStatistics.PaymentStatistic", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("GroupId")
                        .HasColumnType("char(36)");

                    b.Property<decimal>("NotPaidPercentage")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal>("PaidPercentage")
                        .HasColumnType("decimal(65,30)");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.ToTable("PaymentStatistics");
                });

            modelBuilder.Entity("SmartManager.Models.Payments.Payment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(65,30)");

                    b.Property<DateTimeOffset>("Date")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsPaid")
                        .HasColumnType("tinyint(1)");

                    b.Property<Guid>("StudentId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("StudentId");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("SmartManager.Models.Statistics.Statistic", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<int>("FemaleStudentsCount")
                        .HasColumnType("int");

                    b.Property<int>("MaleStudentsCount")
                        .HasColumnType("int");

                    b.Property<int>("PaidStudentsCount")
                        .HasColumnType("int");

                    b.Property<double>("PaidStudentsPercentage")
                        .HasColumnType("double");

                    b.Property<decimal>("TotalPayment")
                        .HasColumnType("decimal(65,30)");

                    b.Property<int>("TotalStudentsCount")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Statistics");
                });

            modelBuilder.Entity("SmartManager.Models.Students.Student", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("GivenName")
                        .HasColumnType("longtext");

                    b.Property<Guid>("GroupId")
                        .HasColumnType("char(36)");

                    b.Property<string>("GroupName")
                        .HasColumnType("longtext");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext");

                    b.Property<Guid?>("StatisticId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Surname")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.HasIndex("StatisticId");

                    b.ToTable("Students");
                });

            modelBuilder.Entity("SmartManager.Models.Attendances.Attendance", b =>
                {
                    b.HasOne("SmartManager.Models.Students.Student", "Student")
                        .WithMany("Attendances")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Student");
                });

            modelBuilder.Entity("SmartManager.Models.GroupStatistics.GroupStatistic", b =>
                {
                    b.HasOne("SmartManager.Models.Groups.Group", "Group")
                        .WithMany("GroupStatistics")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Group");
                });

            modelBuilder.Entity("SmartManager.Models.PaymentStatistics.PaymentStatistic", b =>
                {
                    b.HasOne("SmartManager.Models.Groups.Group", "Group")
                        .WithMany("PaymentStatistics")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Group");
                });

            modelBuilder.Entity("SmartManager.Models.Payments.Payment", b =>
                {
                    b.HasOne("SmartManager.Models.Students.Student", "Student")
                        .WithMany("Payments")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Student");
                });

            modelBuilder.Entity("SmartManager.Models.Students.Student", b =>
                {
                    b.HasOne("SmartManager.Models.Groups.Group", "Group")
                        .WithMany("Students")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SmartManager.Models.Statistics.Statistic", null)
                        .WithMany("Students")
                        .HasForeignKey("StatisticId");

                    b.Navigation("Group");
                });

            modelBuilder.Entity("SmartManager.Models.Groups.Group", b =>
                {
                    b.Navigation("GroupStatistics");

                    b.Navigation("PaymentStatistics");

                    b.Navigation("Students");
                });

            modelBuilder.Entity("SmartManager.Models.Statistics.Statistic", b =>
                {
                    b.Navigation("Students");
                });

            modelBuilder.Entity("SmartManager.Models.Students.Student", b =>
                {
                    b.Navigation("Attendances");

                    b.Navigation("Payments");
                });
#pragma warning restore 612, 618
        }
    }
}
